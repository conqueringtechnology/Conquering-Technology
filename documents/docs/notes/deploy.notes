-=Python=-
    -Python 3.11.5-
    
-=a2hosting=-
    File Manager Dictory - /home/miguelro/app files location

    Python Project - 
        Application root = project files location (conqueringtechnology)
        Application URL = website name.com
        Application startup file & Application Entry point = Leave empty, will be auto generated by a2hosting.
        Passenger log file = /home/miguelro/app files location/logs/conqueringtechnology.log

    --Python Virtual Environment--
        Will be auto created. in the Home Root of WebHost.

    --Test Website--
        conqueringtechnology.com

        If you get It works! Python 3.11.5 is working
        This message is coming from project name/passenger_wsgi.py

    --Direct the Project to project/wsgi.py--
        /home/miguelro/app files location/passenger_wsgi.py

    --Install Django and dependencies--
        Copy the virtual environment path. From the Create Python.
        Go to a2hosting > terminal
        Paste the virtual environment path and hit enter.

        pip install -r requirements.txt

-=Setup Database=-
    -Settings.py-

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',  # Specify the database backend
            'NAME': 'miguelro_My_IT_Portfolio',  # Replace with your actual database name
            'USER': 'miguelro_admin',  # Replace with your database username
            'PASSWORD': 'MySQL@402',  # Replace with your database password
            'HOST': 'localhost',  # Usually localhost for a2hosting
            'PORT': '3306',  # Default MySQL port
        }
    }

    pip install mysqlclient

    -Create Database In a2hosting-
        Follow the wizard to create a database.

-=Settings=-
    DEBUG = False 

    ALLOWED_HOSTS = [
        'example.com',  # Replace with your actual domain name
        'www.example.com',  # If you have a www subdomain
        '123.45.67.89',  # If you want to allow access by IP address (optional)
    ]

    -- Secret Key settings --
        In the area were view.py is, create a file name deploy.py type the below lines.

        from django.core.management.utils import get_random_secret_key
        secret_key = get_random_secret_key()
        print(secret_key)

        Can Delete the deoploy.py file after this.

    -- Static Files --
        This did not work but it is the good rule of thumb.
            STATIC_URL: Set the URL for static files (e.g., '/static/').
            STATIC_ROOT: Set the absolute path to the directory where static files will be collected (e.g., '/home/miguelro/conqueringtechnology/webapp/static/').
            MEDIA_URL: Set the URL for media files (e.g., '/media/').
            MEDIA_ROOT: Set the absolute path to the directory where media files will be stored (e.g., '/home/user/public_html/media/').

        python manage.py collectstatic


-=URLS File=-   
    -- Other files --
        wsgi.py: This file is the entry point for the web server. Ensure it's configured correctly for a2hosting's environment.
        requirements.txt: List all project dependencies here. a2hosting will use this to install them.

-=Additional Info if needed=-
    WSGI File
    
    1. Locate and Review wsgi.py:

    Find the wsgi.py file within your Django project's root directory.
    Ensure it contains the following lines, typically:
    (Python)

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')

    application = get_wsgi_application()
    Use code with caution. Learn more
    Replace your_project_name with your actual project name.
    2. Set Environment Variables (if needed):

    If your Django project requires additional environment variables, set them using a2hosting's control panel or their recommended methods.

    3. Configure Apache (if using):

    Create a .htaccess file in your project's root directory with the following content:
    (Apache)

    WSGIScriptAlias / /home/username/your_project/wsgi.py
    WSGIPythonPath /home/username/your_project

    <Directory /home/username/your_project>
    <Files wsgi.py>
        Require all granted
    </Files>
    </Directory>
    Use code with caution. Learn more
    Replace username and your_project with the correct paths.
    4. Configure Nginx (if using):

    Create a virtual host configuration file with the following directives:
    (Nginx)

    server {
        listen 80;
        server_name yourdomain.com;

        location / {
            try_files $uri @django;
        }

        location @django {
            include uwsgi_params;
            uwsgi_pass unix:/home/username/your_project/your_project.sock;
        }
    }




